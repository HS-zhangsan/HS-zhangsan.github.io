[{"title":"测试文件下载","date":"2022-11-28T19:45:52.000Z","date_formatted":{"ll":"Nov 28, 2022","L":"11/28/2022","MM-DD":"11-28"},"updated":"2022-12-09T09:27:52.555Z","content":"这篇文章用来测试文件下载功能\n先来试一下 PDF\n点击下载\nLinux命令行大全\n点击下载：Linux命令行大全\n再来试一下图片\n\n\n\n点击下载\n点击下载\n然后是 MP3 音频\n下载链接：http://zhangsan.works/posts/test_file_download/碧波摇篮曲.mp3/\n碧波摇篮曲\n好听的\n总结\n目前的问题：\n所有的文件（图片、pdf 和 mp3）都可以通过  的形式生成链接，然后进去查看文件和下载，但是并不是点击链接直接下载。另外不知道为什么资源文件夹用不了，而我的封面就是直接用资源文件夹里的图片的，但是文章内所有文件都用不了。\n还有图片，除了上面的通用方法之外，就连普通的引用本地文件都不行了，不管是绝对路径还是相对路径。而我之前在 测试插入图片 这篇文章中已经测试了可以用。\n","thumbnail":"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/654/202211281946795.jpeg","plink":"https://zhangsan.works/posts/test_file_download/"},{"title":"测试插入图片","date":"2022-11-28T13:30:31.000Z","date_formatted":{"ll":"Nov 28, 2022","L":"11/28/2022","MM-DD":"11-28"},"updated":"2022-12-09T09:28:19.749Z","content":"这篇文章用来测试插入图片\n先试一下图床（虽然说肯定没什么问题。。）\n先来一张\n\n再来一张长屏的\n\n再试一下本地图片\n先是绝对路径\n\n然后是相对路径（资源文件夹）\n\n源代码如下：\n\n结论：失败成功\n插入本地图片失败，不知道哪里出了问题，懒得再研究，直接统一用图床。\n更新：插入本地图片只能用绝对路径，相对路径不知道哪里出了问题。嗯，还是直接用图床。\n更新：之前应该是操作失误导致失败的，重新测试了一下又可以了。\n具体地，修改博客根目录的 _config.yml 配置文件，找到 post_asset_folder 修改为 true 开启文章文件夹。然后新建文章的时候在博客根目录用 hexo new post_name 创建，这样就会在文章目录内创建名为 post_name.md 文件的同时创建名为 post_name 的资源文件夹，然后与文章相关的文件在文章内直接引用就可以了。如 post_name 文件夹中有名为 test.jpg 的图片，则引用格式为 ![](test.jpg)。当然，也可以直接使用绝对路径。而我之前把文章标题和文章文件夹名字都改了所以导致错误，这也是这篇文章的日期为什么在后面，因为之前的删了重写了。（如上图所示使用本地图片源代码）\n但是经过测试，使用本地图片的话，由于博客是部署在 GitHub 上的，所以图片加载非常非常慢，所以实际使用还是上传到图床再使用图片链接（我用的腾讯云COS）。\n更新：我去，刚看了一下才发现，我在 测试下载文件功能 这篇文章中使用的封面大小有 50 多 MB，一度让我连图床都上传不上去，传上去之后也加载的贼慢，然后觉得奇怪看了一下图片属性才发现那么大，我说怎么会那么慢。。。\n然后部署的时候，\n\nGitHub最大建议才50MB。。。错了错了，我换还不行么，你说一个图片整这么大这合理吗？\n所以结论是，一般情况下还是可以用本地图片的，虽然会有点慢但是还可以接受。而且都用 hexo 了就图完全本地化，用本地图片也不用担心图床过期什么的。（虽然我还是用图床）\n","thumbnail":"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/654/202211252057512.jpg","plink":"https://zhangsan.works/posts/test_insert_image/"},{"title":"测试评论系统","date":"2022-11-27T14:12:26.000Z","date_formatted":{"ll":"Nov 27, 2022","L":"11/27/2022","MM-DD":"11-27"},"updated":"2022-11-28T19:04:04.863Z","content":"这篇文章用来测试评论系统\n失败！\n","thumbnail":"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/654/202211271413591.png","plink":"https://zhangsan.works/posts/test_comment/"},{"title":"测试插入音视频","date":"2022-11-26T09:05:31.000Z","date_formatted":{"ll":"Nov 26, 2022","L":"11/26/2022","MM-DD":"11-26"},"updated":"2022-11-28T19:01:51.631Z","content":"这篇文章用来测试插入音视频\n先来测试一下 html 直接嵌入\n首先是B站视频\n\n然后是优酷（迪迦奥特曼外传 远古复活的巨人）\n\n再来（德凯奥特曼 日配版 第1集）\n\n接着来（德凯奥特曼 日配版 第18集）\n\n还来（德凯奥特曼 中配版 第18集）\n\n再然后是网易云音乐\n\n最后是qq音乐\nqq音乐竟然不支持外链播放器？？\n然后又试了一下酷狗、咪咕，结果都不支持生成外链播放器，难怪所有人用的都是网易云，是我想当然了。。\n接着测试一下用插件嵌入更多音视频\n用个屁的插件！\n没有需求不要创造需求。\n用插件也简单，下载好插件直接插入就好了，像什么 H5 原生音视频和各种视频播放平台都可以支持。一般也用不到就不再测试了。\n总结\n直接用 html 插入支持的音视频就可以了。插件暂时用不到。\n首先是视频\n视频的话要注意，默认的代码可能看着不太爽，可以自己优化一下改一下参数（比如这篇文章我只改了b站的视频，优酷的没改，所以看着很蠢），比如b站的画质（虽然有 1080p，但是切换不了，最多 720p）、弹幕什么的。\n优酷的视频只能 720p 了，需要会员的东西一律不能用，比如高贵的 1080p，还有需要会员的视频也不能插入，我放个搜出来排在第一的德凯奥特曼竟然都不行！（为什么这逼奥特曼 18 集只有第 18 集要会员，而且只有一集要会员所有的都不能放🤬）\n又试了一下，刚开始提示没有权限不能播放，不知道为什么又可以了，只有要会员的第 19 集不能放（外面显示 18 集，只有第 18 集要会员，进去了之后又变成了 19 集，只有第 19 集要会员放不了。看不懂看不懂。。。）\n还有爱奇艺，压根不支持。\n然后是音频\n目前貌似只有网易云音乐能用，也可以改一下自动播放、播放器大小什么的，然后也就没啥好说的了。。\n以上。\n","thumbnail":"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/654/202211261032402.jpg","plink":"https://zhangsan.works/posts/test_insert_audio&video/"},{"title":"测试嵌入PDF","date":"2022-11-25T20:22:45.000Z","date_formatted":{"ll":"Nov 25, 2022","L":"11/25/2022","MM-DD":"11-25"},"updated":"2022-11-28T18:58:22.728Z","content":"这篇文章用来测试 pdf 嵌入\n注意：移动端不支持（hexo 竟然不支持高亮？？只能加粗了）\n更新：vivo 手机测试，chrome 可以下载但是不能正常显示，夸克浏览器和 vivo 原生浏览器都不能显示。推测 iOS 或者其他安卓手机一样。\n另外，由于本博客部署在 GitHub Page 上，所以 pdf 过大时加载很慢。（可以挂梯子解决）\n首先是比较小的 pdf\n\n\n\t\n    \n\t\n\n\n\n然后是大一点的 pdf\n\n\n\t\n    \n\t\n\n\n\n最后试一下没有目录（书签？）的 pdf\n不好意思，由于现在 markdown 多级标题自动形成目录，所以没有目录的 pdf 还真没找到。。。\n\n\n\t\n    \n\t\n\n\n\n总结：效果还行，可以用\n","thumbnail":"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/654/202211252027510.jpg","plink":"https://zhangsan.works/posts/test_embed_pdf/"},{"title":"Hello World","date":"2022-11-02T11:56:12.553Z","date_formatted":{"ll":"Nov 2, 2022","L":"11/02/2022","MM-DD":"11-02"},"updated":"2022-11-28T18:50:52.474Z","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick Start\nCreate a new post\n1$ hexo new &quot;My New Post&quot;\nMore info: Writing\nRun server\n1$ hexo server\nMore info: Server\nGenerate static files\n1$ hexo generate\nMore info: Generating\nDeploy to remote sites\n1$ hexo deploy\nMore info: Deployment\n","plink":"https://zhangsan.works/posts/hello_world/"},{"title":"往事","date":"2015-12-29T23:52:55.000Z","date_formatted":{"ll":"Dec 29, 2015","L":"12/29/2015","MM-DD":"12-29"},"author":"李大圣","updated":"2022-11-28T18:51:09.297Z","content":"又想起了那个夜晚\n五年前的夜晚\n黑夜，风雪\n大概正好就是这个时间\n也许是九点，十点，\n或者十一点，十二点\n在周围游荡了一圈之后\n我又不自觉得走到了学校门口\n距离村子，距离家\n不过一二百米的学校门口\n四下，\n黑夜中白茫茫的一片\n那是积雪反射的不知何处而来的光\n学校里不复白日的热闹\n从校门口向里边望去\n操场，教室，商店，走廊……\n漆黑一片\n旁边村子的住宅还有几户人家亮着灯\n有些刺眼的光从拉着窗帘的窗户照射出来\n耳旁只有寒风的呼啸\n听不见其他任何声音\n射出光的窗户那边在干什么？\n一家人围着火炉看电视？\n大概吧，\n不然还能是什么呢？\n我没有对窗户那边产生丝毫兴趣\n脑袋里也没有出现任何问题\n我只知道\n在这边听不到窗户那边的声音，\n也许别人只是很安静的干着自己的事情吧\n和我又有什么关系呢？\n不知何时停在了学校门口\n也许走到这里的时候自然的停了吧\n在这样风雪交加的夜晚\n穿着并不算厚的衣服走在外边\n这并不是一件容易的事\n但你只要走就好了\n只要没死就没什么大不了的事\n走是肯定死不了的\n更难的是走着走着停了下来\n我回来这里是干什么来着？\n好像是想随便走走，\n说不定能熬到天亮？\n又好像是因为某种不明的心理原因\n让我在无处可去的时候回到了最熟悉的地方？\n又或者\n这里离家比较近？\n哦对\n想起来了\n在离开最后一个地方的时候\n走在路上思考怎么度过这个夜晚的时候\n想到了学校旁边好像有个麦秆堆来着\n死是肯定不至于的\n这不就想到了办法么？\n冷好像竟然不是那么冷\n但直接睡在室外的环境是不现实的\n会不会在半夜冻死还不好说\n想要睡着首先是个问题\n麦秆是个好东西呀\n虽然外边覆盖了一层雪\n但只要在底下挖出一个洞\n可以想象\n这会是个很舒服的窝\n不知为何\n我又想起了那只被我遗忘的狗\n他死在了一个麦秆堆里\n是冻死的？\n还是饿死的？\n也许都有吧\n总之\n他是因为我而死的\n我把它带了回来\n又把他的存在遗忘了\n突然\n我对这个死过一只狗的的麦秆堆有些抵触\n虽然我清楚\n这不是同一个麦秆堆\n为什么会抵触呢？\n是愧疚在作祟？\n或者只是单纯的嫌弃和厌恶？\n谁知道呢\n轻轻甩甩脑袋\n将这些乱七八糟的想法丢掉\n嘶\n脑袋竟被晃得疼\n是冷的吗？\n还是饿的？\n管他呢\n问题不大\n新的问题又冒了出来\n在这个季节\n在这个天气\n麦秆堆是流浪狗的好去处\n万一这里被流浪狗占据了怎么办？\n赶走就是了\n那狗毛怎么办？\n或者有狗屎呢？\n虽然雪夜没那么黑\n但是想分辨出这些东西还是不那么的容易\n我可以晚上睡在麦秆堆里并不觉自卑羞耻\n白天依旧学习玩耍，该怎样怎样\n我不会刻意掩饰\n也不会主动吹嘘\n没人知道无所谓\n有人知道也不影响\n没人会说什么\n也没人敢说什么\n不会有人因此看低我\n或者还是会有\n那些不认识我的人？\n无所谓\n能这样想的人都是垃圾\n他们再怎么想对我也没影响\n倒是可以预见的\n很多人眼中我的高度再次拔高一截\n也许更多的人\n对我抱有可笑的同情和不解？\n这么一想又太复杂了\n管他呢\n这一个学校的人都认识我\n但我认识的就那么几个\n难不成\n每一个对我有想法的人我都得去认识了解？\n那多累呀\n但是\n睡在麦秆里和身上占了狗屎不一样\n那太丢人了\n而且一旦屎弄到我本身就不算厚的衣服上\n我根本没法也没地方去洗\n更不可能去扔\n那就很麻烦了\n管他呢\n又想的太多了\n得赶快了\n果然一停下来就一点都不想动弹了\n明明还在风雪里边站着呢\n要是有狗的话\n赶走后把麦秆再往外挖一点就行了\n四下转了转\n依旧是那个夜\n没看到好像存在于记忆中的麦秆堆\n我记错了？\n问题不大\n麦秆堆嘛\n多的是\n再找就是了\n从衣兜里掏出手\n使劲搓了搓脸\n又原地活动了一阵\n抖了抖身上的雪\n把本就不多的能量和精力再次消耗大半\n转过身背向学校\n准备再次移动……\n","thumbnail":"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/654/202211022254638.jpg","plink":"https://zhangsan.works/posts/the_past/"},{"title":"about","date":"2020-11-02T23:51:13.000Z","date_formatted":{"ll":"Nov 2, 2020","L":"11/02/2020","MM-DD":"11-02"},"updated":"2023-01-15T03:13:58.199Z","content":"I, ZhangSan, just be an ordinary genius.\nThis is my official account, although I don’t know what to write on it yet. You might as well subscribe first, at least it won’t bother you with useless notifications now and then.\n\nThen, if there is anything you can add me on WeChat. (Indicate the intention, not necessarily agree)\n\n","plink":"https://zhangsan.works/about/"},{"title":"27-移除元素","date":"2023-01-19T17:52:18.000Z","date_formatted":{"ll":"Jan 19, 2023","L":"01/19/2023","MM-DD":"01-19"},"updated":"2023-01-19T18:39:42.405Z","content":"【目录】 | 力扣链接 | 力扣题解链接\n题目描述\n给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n示例 1: 给定 nums = [3,2,2,3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。\n示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。\n你不需要考虑数组中超出新长度后面的元素。\n题解\n这道题是双指针的经典题目，暴力解法就不再赘述，直接讲双指针的解法。\n\n这是旧版题解\n\n解题思路\n\n首先我们要明确， 数组中的元素不能单独删除，只能覆盖。 （你问为什么？这都不知道你为什么会出现在这里？好吧，原因是 数组的元素在内存地址中是连续的 ）\n回到这道题，移除元素的操作只需要 将其后面的元素依次覆盖前面的 就好。我们很容易想到暴力解法，也就是用两个 for 循环，一个循环遍历数组元素，一个循环更新数组元素。虽然这道题暴力解法也可以过，但是若只是这样我们就不会出现在这里了。(/▽＼)\n（这里我没放暴力的代码，大家可以自己敲出来再进行优化，初学者的话建议不要怕麻烦，没有思路就先写出暴力的解法再考虑能不能优化）\n我们可以使用双指针法，通过一个快指针和慢指针在一个 for 循环下完成两个 for 循环的工作。具体地，遍历数组，快指针和慢指针每次 +1，当位于快指针位置的元素等于要删除的元素时，慢指针停一次，快指针继续递增，每层循环都将快指针位置的元素覆盖至慢指针位置的元素。\n注意以上实现方法并没有改变元素的相对位置。（所以题目的倒数第二句话并没有什么*用）\n\n代码\n12345678910int removeElement(int* nums, int numsSize, int val) &#123;    int fast = 0, slow = 0;    while (fast &lt; numsSize) &#123;        if (nums[fast] != val) &#123;            nums[slow++] = nums[fast];        &#125;        fast++;    &#125;    return slow;&#125;\n复杂度分析\n时间复杂度：O(N)\n空间复杂度：O(1)\n\n\n这是新版题解\n\n解题思路\n\n使用快慢指针，通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。\n具体地，让两个指针 fast 和 slow 初始都为 0，然后同时向后移动，当遇到 val 时，slow 停下而 fast 继续移动，并在过程中将 nums[fast] 的值赋给 nums[slow] 即可。\n双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组、链表、字符串等操作的面试题，都使用双指针法。\n\n代码\n12345678910int removeElement(int* nums, int numsSize, int val)&#123;    int fast = 0, slow = 0;    while (fast &lt; numsSize) &#123;        if (nums[fast] != val) &#123;            nums[slow++] = nums[fast];        &#125;        fast++;    &#125;    return slow;&#125;\n复杂度分析\n时间复杂度：$O(n)$\n空间复杂度：$O(1)$\n总结\n一开始没想到双指针，后面想到了又没写出来。\n总结：长时间不写算法题是这样的，慢慢捡起来就好。\n相关题目\n\n26.删除排序数组中的重复项\n283.移动零\n844.比较含退格的字符串\n977.有序数组的平方\n\n","plink":"https://zhangsan.works/leetcode/27-移除元素/"},{"title":"704-二分查找","date":"2023-01-17T19:56:44.000Z","date_formatted":{"ll":"Jan 17, 2023","L":"01/17/2023","MM-DD":"01-17"},"updated":"2023-01-19T18:44:12.677Z","content":"【目录】 | 力扣链接 | 力扣题解链接\n题目描述\n给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n示例 1:\n123输入: nums = [-1,0,3,5,9,12], target = 9     输出: 4       解释: 9 出现在 nums 中并且下标为 4     \n示例 2:\n123输入: nums = [-1,0,3,5,9,12], target = 2     输出: -1        解释: 2 不存在 nums 中因此返回 -1        \n提示：\n\n你可以假设 nums 中的所有元素是不重复的。\nn 将在 [1, 10000]之间。\nnums 的每个元素都将在 [-9999, 9999]之间。\n\n题解\n解题思路\n\n二分查找有两个前提，第一是**「有序排列」，第二是「无重复元素」**。当满足以上两点的时候就可以考虑是不是可以使用二分法了。（当然这道题题目已经说了是二分查找）\n二分法的逻辑较简单，需要注意的就是 边界条件 ，例如循环判断条件到底是 left &lt; right 还是 left &lt;= right ？或者 right = middle 还是 right = middle - 1？\n这里需要明确区间的定义，二分法的区间定义一般分为两种，一是左闭右闭 [left, right] ，另一种是左闭右开 [left, right) 。\n以数组 [2, 3, 4, 5, 8, 9] 为例，一共 6 个元素，对应下标为 0-5，当区间定义为左闭右闭时，right 初始化为 5，对应的代码为 left &lt;= right 和 right = middle - 1 ；当区间定义为左闭右开时，right 初始化为 6 （由于元素 nums[6] 无意义，所以边界 6 为开区间） ，对应的代码为 left &lt; right 和 right = middle 。\n两种定义方法选择一种固定使用就好，个人建议左闭右闭，因为右边界有意义，返回结果比较清晰直观。当然，适合自己就好。\n\n代码\n1234567891011121314int search(int* nums, int numsSize, int target)&#123;    int left = 0, right = numsSize - 1;    while (left &lt;= right) &#123;        int middle = left + ((right - left) / 2);        if (nums[middle] &gt; target) &#123;            right = middle - 1;        &#125; else if (nums[middle] &lt; target) &#123;            left = middle + 1;        &#125; else &#123;            return middle;        &#125;    &#125;    return -1;&#125;\n复杂度分析\n时间复杂度：O(logN)\n空间复杂度：O(N)\nPS：若题目要求时间复杂度带 logN ，一般要用到二分法。\n总结\n二分查找比较简单，但是我好久没做题，今天刚上手结果就把二分查找的错误都犯了，具体就是忘了二分查找的关键，即边界条件，由此搞错了循环条件的小于还是小于等于，还有没找到时是等于 middle 还是 middle-1。\n还是不熟悉，太久没做连最基础的二分查找都忘了，一时不知该说什么。\n相关题目\n\n35.搜索插入位置\n34.在排序数组中查找元素的第一个和最后一个位置\n69.x 的平方根\n367.有效的完全平方数\n\n","plink":"https://zhangsan.works/leetcode/704-二分查找/"},{"title":"leetcode","date":"2023-01-18T00:00:00.000Z","date_formatted":{"ll":"Jan 18, 2023","L":"01/18/2023","MM-DD":"01-18"},"updated":"2023-01-18T03:27:59.820Z","content":"简体中文 ｜ English\n看中文还不够么？。。\n","plink":"https://zhangsan.works/leetcode/index-en/"},{"title":"leetcode","date":"2023-01-18T00:00:00.000Z","date_formatted":{"ll":"Jan 18, 2023","L":"01/18/2023","MM-DD":"01-18"},"updated":"2023-01-19T10:43:40.171Z","content":"简体中文 ｜ English\n*写在前面\n先声明，本人是跟着代码随想录(https://programmercarl.com)刷的，如有雷同，不是巧合。\n然后剩下好多想说的话懒得写了，后面想写了再补上。\n也可以直接在主页或者右下角搜索具体题目。\n数组\n\n数组理论基础\n二分查找\n移除元素\n有序数组的平方\n长度最小的子数组\n螺旋矩阵II\n总结篇\n\n链表\n哈希表\n字符串\n双指针法\n栈与队列\n二叉树\n回溯算法\n贪心算法\n动态规划\n单调栈\n动态规划\n\n0005. 最长回文子串 - 中等\n0010. 正则表达式匹配 - 困难\n\n","plink":"https://zhangsan.works/leetcode/"},{"title":"数组理论基础","date":"2023-01-18T09:59:35.000Z","date_formatted":{"ll":"Jan 18, 2023","L":"01/18/2023","MM-DD":"01-18"},"updated":"2023-01-18T11:05:08.157Z","content":"【目录】\n数组比较简单，没什么好说的，为了系统一点也写上，这里直接把 Carl 的搬运过来了，原文链接 https://programmercarl.com/数组理论基础.html\n\n数组是非常基础的数据结构，在面试中，考察数组的题目一般在思维上都不难，主要是考察对代码的掌控能力\n也就是说，想法很简单，但实现起来 可能就不是那么回事了。\n首先要知道数组在内存中的存储方式，这样才能真正理解数组相关的面试题\n数组是存放在连续内存空间上的相同类型数据的集合。\n数组可以方便的通过下标索引的方式获取到下标下对应的数据。\n举一个字符数组的例子，如图所示：\n\n需要两点注意的是\n\n数组下标都是从0开始的。\n数组内存空间的地址是连续的\n\n正是因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。\n例如删除下标为3的元素，需要对下标为3的元素后面的所有元素都要做移动操作，如图所示：\n\n而且大家如果使用C++的话，要注意vector 和 array的区别，vector的底层实现是array，严格来讲vector是容器，不是数组。\n数组的元素是不能删的，只能覆盖。\n那么二维数组直接上图，大家应该就知道怎么回事了\n\n那么二维数组在内存的空间地址是连续的么？\n不同编程语言的内存管理是不一样的，以C++为例，在C++中二维数组是连续分布的。\n我们来做一个实验，C++测试代码如下：\n123456789101112void test_arr() &#123;    int array[2][3] = &#123;\t\t&#123;0, 1, 2&#125;,\t\t&#123;3, 4, 5&#125;    &#125;;    cout &lt;&lt; &amp;array[0][0] &lt;&lt; &quot; &quot; &lt;&lt; &amp;array[0][1] &lt;&lt; &quot; &quot; &lt;&lt; &amp;array[0][2] &lt;&lt; endl;    cout &lt;&lt; &amp;array[1][0] &lt;&lt; &quot; &quot; &lt;&lt; &amp;array[1][1] &lt;&lt; &quot; &quot; &lt;&lt; &amp;array[1][2] &lt;&lt; endl;&#125;int main() &#123;    test_arr();&#125;\n测试地址为\n120x7ffee4065820 0x7ffee4065824 0x7ffee40658280x7ffee406582c 0x7ffee4065830 0x7ffee4065834\n注意地址为16进制，可以看出二维数组地址是连续一条线的。\n一些录友可能看不懂内存地址，我就简单介绍一下， 0x7ffee4065820 与 0x7ffee4065824 差了一个4，就是4个字节，因为这是一个int型的数组，所以两个相邻数组元素地址差4个字节。\n0x7ffee4065828 与 0x7ffee406582c 也是差了4个字节，在16进制里8 + 4 = c，c就是12。\n如图：\n\n所以可以看出在C++中二维数组在地址空间上是连续的。\n像Java是没有指针的，同时也不对程序员暴露其元素的地址，寻址操作完全交给虚拟机。\n所以看不到每个元素的地址情况，这里我以Java为例，也做一个实验。\n1234567public static void test_arr() &#123;    int[][] arr = &#123;&#123;1, 2, 3&#125;, &#123;3, 4, 5&#125;, &#123;6, 7, 8&#125;, &#123;9,9,9&#125;&#125;;    System.out.println(arr[0]);    System.out.println(arr[1]);    System.out.println(arr[2]);    System.out.println(arr[3]);&#125;\n输出的地址为：\n1234[I@7852e922[I@4e25154f[I@70dea4e[I@5c647e05\n这里的数值也是16进制，这不是真正的地址，而是经过处理过后的数值了，我们也可以看出，二维数组的每一行头结点的地址是没有规则的，更谈不上连续。\n所以Java的二维数组可能是如下排列的方式：\n\n这里面试中数组相关的理论知识就介绍完了。\n","plink":"https://zhangsan.works/leetcode/数组理论基础/"},{"title":"timeline","date":"2022-11-28T16:47:42.000Z","date_formatted":{"ll":"Nov 28, 2022","L":"11/28/2022","MM-DD":"11-28"},"updated":"2023-01-18T03:26:07.343Z","content":"\n新增「leetcode」板块，开始在力扣刷题并记录。\n2023-01-18 11:25:00\n\n之前忘了。\n截至今日，博客情况如下：\n基于 hexo &amp; inside，部署在 GitHub Page。\n绑定自定义域名为：https://zhangsan.works/\n完成一系列基础配置。\n完成「嵌入pdf、插入图片、插入音视频、设置永久链接、下载文件功能」测试。\n评论系统测试失败。\n2022-11-28 21:35:56\n往事，不提也罢。\n2015-12-29 23:55:34\n","plink":"https://zhangsan.works/timeline/"}]